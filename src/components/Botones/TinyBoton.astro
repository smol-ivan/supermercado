---
export interface Props {
    label: string;
    onClick?: () => void;
    isSubmit?: boolean;
    isReset?: boolean;
    isReturn?: boolean;
    isDisabled?: boolean;
    isHidden?: boolean;
    isOk?: boolean;
    isCancel?: boolean;
    href?: string;
}

const {
    label,
    isSubmit,
    isReset,
    isReturn,
    isDisabled,
    isHidden,
    isOk,
    isCancel,
    onClick,
    href,
} = Astro.props;

const handleClick = () => {
    if (isDisabled) return;
    if (onClick) onClick();
};

const buttonClass = isSubmit
    ? "boton-submit"
    : isReset
      ? "boton-reset"
      : isReturn
        ? "boton-return"
        : isOk
          ? "boton-ok"
          : isCancel
            ? "boton-cancel"
            : "";

const buttonType = isSubmit ? "submit" : isReset ? "reset" : "button";
---

{
    href ? (
        <a class={`boton ${buttonClass}`} href={href} hidden={isHidden}>
            {label}
        </a>
    ) : (
        <button
            class={`boton ${buttonClass}`}
            disabled={isDisabled}
            hidden={isHidden}
            type={buttonType}
            onClick={handleClick}
        >
            {label}
        </button>
    )
}

<style>
    @reference "../../styles/global.css";

    .boton {
        @apply text-white font-bold px-[1.5rem] py-[0.5rem] rounded-md cursor-pointer flex justify-center items-center;
    }

    .boton:active {
        @apply scale-90 transition-transform;
    }

    .boton-submit {
        @apply bg-amber-400 hover:bg-amber-500 active:bg-amber-600;
    }

    .boton-reset {
        @apply bg-red-300 hover:bg-red-400 active:bg-red-500;
    }

    .boton-return {
        @apply bg-blue-300 hover:bg-blue-400 active:bg-blue-500;
    }
</style>
